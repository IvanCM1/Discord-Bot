const axios = require("axios")

/*opts = {
    limit: 1,           //maximum number of posts to get (defaults to 25, sometimes may not show enough posts if there are not so many)
    stickies: false,   //wheter or not to allow sticky posts (defaults to true)
    videos: false,      //wheter or not to allow video posts (defaults to true)
    nsfw: true,        //wheter or not to allow nsfw posts (defaults to true)
    spoiler: true,     //wheter or not to allow spoiler posts (defaults to true)
    onlyAwarded: true,  //wheter or not to only display awarded posts (defaults to false)
    minScore: 1000       //minimum score for the posts to have (defaults to 0)
}*/

async function filterSticky (posts) {
    let filteredPosts = []
    for (i in posts) {
        if (!posts[i].stickied) {
            filteredPosts.push(posts[i])
        }
    }
    return filteredPosts
}

async function filterVideos (posts) {
    let filteredPosts = []
    for (i in posts) {
        if (!posts[i].is_video) {filteredPosts.push(posts[i])}
    }
    return filteredPosts
}

async function filterNSFW (posts) {
    let filteredPosts = []
    for (i in posts) {
        if (!posts[i].over_18) {filteredPosts.push(posts[i])}
    }
    return filteredPosts
}

async function filterSpoiler (posts) {
    let filteredPosts = []
    for (i in posts) {
        if (!posts[i].spoiler) {filteredPosts.push(posts[i])}
    }
    return filteredPosts
}

async function filterNotAwarded (posts) {
    let filteredPosts = []
    for (i in posts) {
        if (typeof posts[i].all_awardings !== undefined) {
            filteredPosts.push(posts[i])
        }
    }
    return filteredPosts
}


exports.getSubreddit = async function(subreddit, opts) {
//async function getSubreddit (subreddit, opts) {
    let def = {
        limit: 25,          
        stickies: true,
        videos: true,
        nsfw: true,
        spoiler: true,
        onlyAwarded: false,
        minScore: 0
    }
    opts = opts || def
    
    if (subreddit.startsWith("r/")) {subreddit = subreddit.substring(2)}

    let info = await axios.get(`https://www.reddit.com/r/${subreddit}/.json`)
    let data = info.data.data.children
    
    let posts = []
    for (i = 0; i < data.length; i++) {
        posts.push(data[i].data)
    }

    if (typeof opts.stickies !== "undefined") {
        if (!opts.stickies) {
            posts = await filterSticky(posts)
        }
    }

    if (typeof opts.videos !== "undefined") {
        if (!opts.videos) {
            posts = await filterVideos(posts)
        }
    }
    
    if (typeof opts.nsfw !== "undefined") {
        if (!opts.nsfw) {
            posts = await filterNSFW(posts)
        }
    }

    if (typeof opts.spoiler !== "undefined") {
        if (!opts.spoiler) {
            posts = await filterSpoiler(posts)
        }
    }

    if (typeof opts.onlyAwarded !== "undefined") {
        if (opts.onlyAwarded) {
        posts = await filterNotAwarded(posts)
        }
    }

    let scoredPosts = []
    let minimumScore = opts.minScore || 0
    for (i in posts) {
        if (posts[i].score > minimumScore) {scoredPosts.push(posts[i])}
    }

    let max = opts.limit || 25
    posts = []
    for (i = 0; i < max && i < scoredPosts.length; i++) {
        posts.push(scoredPosts[i])
    }

    return posts
}

//getSubreddit("memes", opts).then(f => console.log(f))




async function filterType (posts, type) {
    let filteredPosts = []
    if (type === "post") {
        for (i in posts) {
            if (typeof posts[i].spoiler !== "undefined") {filteredPosts.push(posts[i])}
        }
    }
    else if (type === "comment") {
        for (i in posts) {
            if (typeof posts[i].spoiler === "undefined") {filteredPosts.push(posts[i])}
        }
    }
    else {return posts}

    return filteredPosts
}

exports.getUser = async function(user, opts) {
//async function getUser (user, opts) {
    let def = {
        limit: 25,        
        type: "all",            //"post", "comment", "all"
        stickies: true,
        videos: true,
        nsfw: true,
        spoiler: true,
        onlyAwarded: false,
        minScore: 0
    }
    opts = opts || def

    if (user.startsWith("u/")) {user = user.substring(2)}

    let info = await axios.get(`https://www.reddit.com/u/${user}/.json`)
    let data = info.data.data.children

    let posts = []
    for (i = 0; i < data.length; i++) {
        posts.push(data[i].data)
    }

    if (typeof opts.type !== "undefined") {
        posts = await filterType(posts, opts.type)
    }

    if (typeof opts.stickies !== "undefined") {
        if (!opts.stickies) {
            posts = await filterSticky(posts)
        }
    }

    if (typeof opts.videos !== "undefined") {
        if (!opts.videos) {
            posts = await filterVideos(posts)
        }
    }
    
    if (typeof opts.nsfw !== "undefined") {
        if (!opts.nsfw) {
            posts = await filterNSFW(posts)
        }
    }

    if (typeof opts.spoiler !== "undefined") {
        if (!opts.spoiler) {
            posts = await filterSpoiler(posts)
        }
    }

    if (typeof opts.onlyAwarded !== "undefined") {
        if (opts.onlyAwarded) {
        posts = await filterNotAwarded(posts)
        }
    }

    let scoredPosts = []
    let minimumScore = opts.minScore || 0
    for (i in posts) {
        if (posts[i].score > minimumScore) {scoredPosts.push(posts[i])}
    }

    let max = opts.limit || 25
    posts = []
    for (i = 0; i < max && i < scoredPosts.length; i++) {
        posts.push(scoredPosts[i])
    }

    return posts
}

/*opts = {
    limit: 1,        
    type: "post",            //"post", "comment", "all"
    stickies: false,
    videos: false,
    nsfw: false,
    spoiler: false,
    onlyAwarded: true,
    minScore: 0
}
*/
//getUser("srgrafo"/*, opts*/).then(f => console.log(f))
